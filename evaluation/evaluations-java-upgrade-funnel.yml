- name: Unique User Upgrade Funnel Overview
  difficulty: hard
  question: Provide a step-by-step funnel of the VSCode Java upgrade process by unique
    user and session, with ratios for each major step across the funnel stages.
  intent: Exploratory
  kusto:
  - name: Funnel Overview Query
    query: 'let eventOrder = dynamic(["vscjava.vscode-java-upgrade/generateplan.prepare","vscjava.vscode-java-upgrade/generateplan.start","vscjava.vscode-java-upgrade/generateplan.end","vscjava.vscode-java-upgrade/confirmplan.prepare","vscjava.vscode-java-upgrade/confirmplan.start","vscjava.vscode-java-upgrade/confirmplan.end","vscjava.vscode-java-upgrade/openrewrite.prepare","vscjava.vscode-java-upgrade/openrewrite.start","vscjava.vscode-java-upgrade/openrewrite.end","vscjava.vscode-java-upgrade/buildfix.prepare","vscjava.vscode-java-upgrade/buildfix.start","vscjava.vscode-java-upgrade/buildfix.end","vscjava.vscode-java-upgrade/validatecves.prepare","vscjava.vscode-java-upgrade/validatecves.start","vscjava.vscode-java-upgrade/validatecves.end","vscjava.vscode-java-upgrade/validatecodebehaviorconsistency.prepare","vscjava.vscode-java-upgrade/validatecodebehaviorconsistency.start","vscjava.vscode-java-upgrade/validatecodebehaviorconsistency.end","vscjava.vscode-java-upgrade/summarizechanges.start","vscjava.vscode-java-upgrade/summarizechanges.prepare","vscjava.vscode-java-upgrade/summarizechanges.end"]);

      let noSessionEvents = dynamic(["vscjava.vscode-java-upgrade/generateplan.start",
      "vscjava.vscode-java-upgrade/generateplan.prepare", "vscjava.vscode-java-upgrade/generateplan.end"]);

      let base = database("VSCodeExt").RawEventsVSCodeExt

      | where ExtensionName == "vscjava.vscode-java-upgrade"

      | where tostring(Properties["sessionid"]) != "MOCKSESSION"

      | where ServerTimestamp  between ([''<_startTime>''] .. [''<_endTime>''])

      | extend majorVersion = toint(split(ExtensionVersion, ".", 0)[0]), minorVersion
      = toint(split(ExtensionVersion, ".", 1)[0])

      | where majorVersion > 0 or minorVersion >=10

      | join kind=inner (database("VSCodeInsights").fact_user_isinternal) on DevDeviceId;

      let raw = base

      | where isempty([''<_versions>'']) or ExtensionVersion in ([''<_versions>''])

      | where isempty( [''<_user_types>'']) or IsInternal in ( [''<_user_types>''])

      | extend sessionId = tostring(Properties["sessionid"]);

      let operations = raw

      | extend session = tostring(Properties["sessionid"])

      | where EventName in (eventOrder);

      let totalUser = toscalar(operations | summarize dcount(VSCodeMachineId));

      let totalSession = toscalar(operations | summarize dcount(session));

      operations

      | summarize sessionCount = dcount(session), userCount = dcount(VSCodeMachineId)
      by EventName

      | extend orderIndex = array_index_of(eventOrder, EventName)

      | project EventName, sessionPercentage = iff(EventName in (noSessionEvents),
      100.0, round(todouble(sessionCount) / totalSession * 100.0, 2)), sessionCount,
      userPercentage = round(todouble(userCount) / totalUser * 100.0, 2), userCount,
      orderIndex

      | where orderIndex >= 0

      | order by orderIndex asc

      | project EventName, sessionCount = iff(EventName in (noSessionEvents), "N/A",
      tostring(sessionCount)), sessionPercentage = iff(EventName in (noSessionEvents),
      "N/A", strcat(sessionPercentage, "%")), userCount, userPercentage = strcat(userPercentage,
      "%");'
  scoringRules:
  - name: Correct event order
    rule: The query should present the funnel in the exact order specified in eventOrder.
    score: 1.0
  - name: Distinct user and session calculations
    rule: The calculation should use dcount(VSCodeMachineId) for unique users and
      dcount(session) for sessions.
    score: 1.0
  - name: Accurate ratios
    rule: Percentage calculations for sessions and users should be correct and each
      step ratio should match the expected, excluding steps noted in noSessionEvents.
    score: 2.0
  - name: Filter by correct extension and time range
    rule: Results should be filtered to ExtensionName "vscjava.vscode-java-upgrade"
      and ServerTimestamp between the designated start and end times.
    score: 1.0
  - name: Exclude mock sessions
    rule: Session filtering should exclude any with MOCKSESSION.
    score: 1.0
- name: Build Tool Distribution With Success Rate
  difficulty: medium
  question: Show the distribution of build tools used in the upgrade confirmation
    and the success rate per tool (session-level).
  intent: Descriptive
  kusto:
  - name: Build Tool Success Query
    query: "let base = database(\"VSCodeExt\").RawEventsVSCodeExt\n| where ExtensionName\
      \ == \"vscjava.vscode-java-upgrade\"\n| where tostring(Properties[\"sessionid\"\
      ]) != \"MOCKSESSION\"\n| where ServerTimestamp  between (['<_startTime>'] ..\
      \ ['<_endTime>'])\n| extend majorVersion = toint(split(ExtensionVersion, \"\
      .\", 0)[0]), minorVersion = toint(split(ExtensionVersion, \".\", 1)[0])\n| where\
      \ majorVersion > 0 or minorVersion >=10\n| join kind=inner (database(\"VSCodeInsights\"\
      ).fact_user_isinternal) on DevDeviceId;\nlet raw = base\n| where isempty(['<_versions>'])\
      \ or ExtensionVersion in (['<_versions>'])\n| where isempty(['<_user_types>'])\
      \ or IsInternal in (['<_user_types>'])\n| extend sessionId = tostring(Properties[\"\
      sessionid\"]);\nraw \n| where EventName == \"vscjava.vscode-java-upgrade/confirmplan.end\"\
      \n| extend buildTool = tostring(Properties[\"buildtool\"])\n| distinct buildTool,\
      \ sessionId\nlet all = raw\n| where EventName == \"vscjava.vscode-java-upgrade/confirmplan.end\"\
      \n| distinct VSCodeMachineId, startTime = ServerTimestamp, sessionId, majorVersion,\
      \ minorVersion;\nlet openRewriteFailedResults = raw\n| where EventName ==  \"\
      vscjava.vscode-java-upgrade/openrewrite.end\" and Properties[\"result\"] ==\
      \ \"failed\"\n| distinct VSCodeMachineId, sessionId, majorVersion, minorVersion\n\
      | project sessionId, orResult = \"OpenResultFailed\";\nlet buildFixResult =\
      \ raw\n| where EventName == \"vscjava.vscode-java-upgrade/buildfix.end\"\n|\
      \ extend buildResult = iff(Properties[\"result\"] == \"true\", \"Succeeded\"\
      , \"BuildFixFailed\")\n| distinct VSCodeMachineId, sessionId, majorVersion,\
      \ minorVersion, buildResult\n| project sessionId, buildResult;\nlet result =\
      \ all\n| join kind=leftouter openRewriteFailedResults on sessionId\n| join kind=leftouter\
      \ buildFixResult on sessionId\n| extend result = case(isnotempty( buildResult),\
      \ buildResult, isnotempty(orResult), orResult, \"Incomplete\")\n| project VSCodeMachineId,\
      \ startTime, sessionId, result, majorVersion, minorVersion, version = strcat(majorVersion,\
      \ \".\", minorVersion);\n| join result on sessionId\n| summarize totalSession\
      \ = dcount(sessionId), succeededSession = dcountif(sessionId, result  == \"\
      Succeeded\"), totalUser = dcount(VSCodeMachineId), succeededUser = dcountif(VSCodeMachineId,\
      \ result  == \"Succeeded\") by buildTool\n| project buildTool, succeededSession,\
      \ totalSession, [\"succeedRate (%)\"] = round(succeededSession * 1.0 / totalSession,\
      \ 4) * 100;"
  scoringRules:
  - name: Correct buildTool extraction
    rule: The build tool should be correctly extracted from Properties["buildtool"]
      at the confirmation event.
    score: 1.0
  - name: Session-level distinctness
    rule: Calculation should employ distinct sessions per buildTool.
    score: 1.0
  - name: Accurate success rate computation
    rule: The success rate should be calculated only for sessions with result == "Succeeded",
      divided by total session count for that buildTool.
    score: 2.0
  - name: All major build tools included
    rule: The query should enumerate all observed buildTool types in the period.
    score: 1.0
- name: Migration Distribution By Source/Target Version
  difficulty: medium
  question: Breakdown upgrade session results by migration source and target Java
    versions, with success rates per migration path.
  intent: Descriptive
  kusto:
  - name: Migration Path Distribution Query
    query: "let base = database(\"VSCodeExt\").RawEventsVSCodeExt\n| where ExtensionName\
      \ == \"vscjava.vscode-java-upgrade\"\n| where tostring(Properties[\"sessionid\"\
      ]) != \"MOCKSESSION\"\n| where ServerTimestamp  between (['<_startTime>'] ..\
      \ ['<_endTime>'])\n| extend majorVersion = toint(split(ExtensionVersion, \"\
      .\", 0)[0]), minorVersion = toint(split(ExtensionVersion, \".\", 1)[0])\n| where\
      \ majorVersion > 0 or minorVersion >=10\n| join kind=inner (database(\"VSCodeInsights\"\
      ).fact_user_isinternal) on DevDeviceId;\nlet raw = base\n| where isempty(['<_versions>'])\
      \ or ExtensionVersion in (['<_versions>'])\n| where isempty(['<_user_types>'])\
      \ or IsInternal in (['<_user_types>'])\n| extend sessionId = tostring(Properties[\"\
      sessionid\"]);\nraw \n| where EventName == \"vscjava.vscode-java-upgrade/confirmplan.end\"\
      \n| extend sourceVersion = toint(Properties[\"sourcejavaversion\"]), targetVersion\
      \ = toint(Properties[\"targetjavaversion\"])\n| distinct sourceVersion, targetVersion,\
      \ sessionId\nlet all = raw\n| where EventName == \"vscjava.vscode-java-upgrade/confirmplan.end\"\
      \n| distinct VSCodeMachineId, startTime = ServerTimestamp, sessionId, majorVersion,\
      \ minorVersion;\nlet openRewriteFailedResults = raw\n| where EventName ==  \"\
      vscjava.vscode-java-upgrade/openrewrite.end\" and Properties[\"result\"] ==\
      \ \"failed\"\n| distinct VSCodeMachineId, sessionId, majorVersion, minorVersion\n\
      | project sessionId, orResult = \"OpenResultFailed\";\nlet buildFixResult =\
      \ raw\n| where EventName == \"vscjava.vscode-java-upgrade/buildfix.end\"\n|\
      \ extend buildResult = iff(Properties[\"result\"] == \"true\", \"Succeeded\"\
      , \"BuildFixFailed\")\n| distinct VSCodeMachineId, sessionId, majorVersion,\
      \ minorVersion, buildResult\n| project sessionId, buildResult;\nlet result =\
      \ all\n| join kind=leftouter openRewriteFailedResults on sessionId\n| join kind=leftouter\
      \ buildFixResult on sessionId\n| extend result = case(isnotempty( buildResult),\
      \ buildResult, isnotempty(orResult), orResult, \"Incomplete\")\n| project VSCodeMachineId,\
      \ startTime, sessionId, result, majorVersion, minorVersion, version = strcat(majorVersion,\
      \ \".\", minorVersion);\n| join result on sessionId\n| summarize totalSession\
      \ = dcount(sessionId), succeededSession = dcountif(sessionId, result  == \"\
      Succeeded\"), totalUser = dcount(VSCodeMachineId), succeededUser = dcountif(VSCodeMachineId,\
      \ result  == \"Succeeded\") by sourceVersion, targetVersion\n| project sourceVersion,\
      \ targetVersion, succeededSession, totalSession, [\"succeedRate (%)\"] = round(succeededSession\
      \ * 1.0 / totalSession, 4) * 100;"
  scoringRules:
  - name: Correct extraction of migration path
    rule: Source and target Java version should be extracted as integers from Properties
      for each session.
    score: 1.0
  - name: Session-level distinctness
    rule: Total session and success counts should use unique sessionId per migration
      path.
    score: 1.0
  - name: Accurate success rate by migration
    rule: Success rates should be computed per (sourceVersion, targetVersion) as succeededSession/totalSession.
    score: 2.0
  - name: Group results by migration path
    rule: Final results should be grouped by sourceVersion and targetVersion.
    score: 1.0
- name: Upgrade Result Funnel By Session Ratio
  difficulty: medium
  question: 'Report the session count and conversion ratio for each major upgrade
    step in the funnel: plan confirmation, OpenRewrite, BuildFix, CVE validation,
    Consistency Check, and summarizing.'
  intent: Diagnostic
  kusto:
  - name: Funnel Step Conversion Query
    query: 'let base = database("VSCodeExt").RawEventsVSCodeExt

      | where ExtensionName == "vscjava.vscode-java-upgrade"

      | where tostring(Properties["sessionid"]) != "MOCKSESSION"

      | where ServerTimestamp  between ([''<_startTime>''] .. [''<_endTime>''])

      | extend majorVersion = toint(split(ExtensionVersion, ".", 0)[0]), minorVersion
      = toint(split(ExtensionVersion, ".", 1)[0])

      | where majorVersion > 0 or minorVersion >=10

      | join kind=inner (database("VSCodeInsights").fact_user_isinternal) on DevDeviceId;

      let raw = base

      | where isempty([''<_versions>'']) or ExtensionVersion in ([''<_versions>''])

      | where isempty( [''<_user_types>'']) or IsInternal in ( [''<_user_types>''])

      | extend sessionId = tostring(Properties["sessionid"]);

      let createPlan = raw | where EventName == "vscjava.vscode-java-upgrade/confirmplan.end"
      | summarize dcount(sessionId) | project Stage = "Plan Confirmed/Created", Sessions
      = dcount_sessionId, order = 0;

      let openrewrite = raw | where EventName == "vscjava.vscode-java-upgrade/openrewrite.end"
      and Properties["result"] == "succeed" | summarize dcount(sessionId) | project
      Stage = "OpenRewrite Succeeded", Sessions = dcount_sessionId, order = 1;

      let buildFix = raw | where EventName == "vscjava.vscode-java-upgrade/buildfix.end"
      and Properties["result"] == "true" | summarize dcount(sessionId) | project Stage
      = "Build Fix Succeeded", Sessions = dcount_sessionId, order = 2;

      let cve = raw | where EventName == "vscjava.vscode-java-upgrade/validatecves.end"
      | distinct sessionId, cves = tostring(Properties["cves"]) | summarize dcountif(sessionId,
      isempty( cves)) | project Stage = "CVE Validation Passed", Sessions = dcountif_sessionId,
      order = 3;

      let consistency = raw | where EventName == "vscjava.vscode-java-upgrade/validatecodebehaviorconsistency.end"
      | distinct sessionId, behaviorChangesCount = toint(Measures["behaviorchangescount"]),
      brokenFilesCount = toint(Measures["brokenfilescount"]) | summarize dcountif(sessionId,
      behaviorChangesCount ==0 and brokenFilesCount  == 0) | project Stage = "Consistency
      Validation Passed", Sessions = dcountif_sessionId, order = 4;

      let summarize_ended = raw | where EventName == "vscjava.vscode-java-upgrade/summarizeupgrade.end"
      | summarize dcount(sessionId) | project Stage = "Summarizing ended", Sessions
      = dcount_sessionId, order = 5;

      let data = createPlan | union openrewrite | union buildFix | union cve | union
      consistency | union summarize_ended;

      let totalSessions = toscalar(createPlan | summarize max(Sessions));

      data

      | extend Ratio = Sessions * 100.0 / totalSessions

      | order by order asc

      | project Stage, Sessions, Ratio;'
  scoringRules:
  - name: Accurate session count for each step
    rule: Each step should correctly count distinct sessionId corresponding to the
      step.
    score: 2.0
  - name: Correct ratio calculation
    rule: Ratio should be Sessions * 100 / totalSessions for every funnel stage.
    score: 2.0
  - name: Explicit funnel stages
    rule: 'The following funnel steps should always be present: Plan Confirmed, OpenRewrite,
      BuildFix, CVE Validation, Consistency Validation, Summarizing.'
    score: 1.0
  - name: Correct filtering by event and outcome
    rule: Each step must filter for its expected event and success or completion outcome.
    score: 1.0
- name: Upgrade Error Message Distribution
  difficulty: easy
  question: List the top error messages for VSCode Java upgrade sessions, reporting
    the count of sessions and distinct users per error.
  intent: Diagnostic
  kusto:
  - name: Upgrade Error Distribution Query
    query: "let base = database(\"VSCodeExt\").RawEventsVSCodeExt\n| where ExtensionName\
      \ == \"vscjava.vscode-java-upgrade\"\n| where tostring(Properties[\"sessionid\"\
      ]) != \"MOCKSESSION\"\n| where ServerTimestamp  between (['<_startTime>'] ..\
      \ ['<_endTime>'])\n| extend majorVersion = toint(split(ExtensionVersion, \"\
      .\", 0)[0]), minorVersion = toint(split(ExtensionVersion, \".\", 1)[0])\n| where\
      \ majorVersion > 0 or minorVersion >=10\n| join kind=inner (database(\"VSCodeInsights\"\
      ).fact_user_isinternal) on DevDeviceId;\nlet raw = base\n| where isempty(['<_versions>'])\
      \ or ExtensionVersion in (['<_versions>'])\n| where isempty( ['<_user_types>'])\
      \ or IsInternal in ( ['<_user_types>'])\n| extend sessionId = tostring(Properties[\"\
      sessionid\"]);\nraw\n| extend eventType = tostring( Properties[\"eventtype\"\
      ])\n| where eventType == \"error\"\n| extend errorMessage = tostring(Properties[\"\
      errormessage\"])\n| where isnotempty(errorMessage)\n| summarize dcount(VSCodeSessionId)\
      \ by errorMessage \n| top 50 by dcount_VSCodeSessionId;"
  scoringRules:
  - name: Correct extraction of errorMessage
    rule: Error messages should be fetched from Properties["errormessage"].
    score: 1.0
  - name: Count distinct user sessions per message
    rule: For every error message, count and report the number of distinct VSCodeSessionId.
    score: 2.0
  - name: Ranking by error frequency
    rule: Result should be sorted and display the top errors by unique sessions.
    score: 1.0
  - name: Correct filtering for errors
    rule: Only results with eventType == "error" and non-empty errorMessage are included.
    score: 1.0
- name: Extension Token Usage Per Step Percentiles
  difficulty: medium
  question: For each extension tool call step, report the percentiles (50, 75, 90,
    95) and max for token count per session and per tool.
  intent: Insight
  kusto:
  - name: Token Usage Percentile Query
    query: 'let base = database("VSCodeExt").RawEventsVSCodeExt

      | where ExtensionName == "vscjava.vscode-java-upgrade"

      | where tostring(Properties["sessionid"]) != "MOCKSESSION"

      | where ServerTimestamp  between ([''<_startTime>''] .. [''<_endTime>''])

      | extend majorVersion = toint(split(ExtensionVersion, ".", 0)[0]), minorVersion
      = toint(split(ExtensionVersion, ".", 1)[0])

      | where majorVersion > 0 or minorVersion >=10

      | join kind=inner (database("VSCodeInsights").fact_user_isinternal) on DevDeviceId;

      let raw = base

      | where isempty([''<_versions>'']) or ExtensionVersion in ([''<_versions>''])

      | where isempty( [''<_user_types>'']) or IsInternal in ( [''<_user_types>''])

      | extend sessionId = tostring(Properties["sessionid"]);

      raw

      | where EventName has "vscjava.vscode-java-upgrade/llmclient.sendrequest"

      | extend caller = tostring(Properties["caller"])

      | extend completionToken = toint(Measures["completiontoken"]),prompToken = toint(Measures["prompttoken"]),
      tokens = toint(Measures["tokens"])

      | summarize completionToken = sum(completionToken), prompToken = sum(prompToken),
      tokens = sum(tokens), toolCalls = count() by sessionId, caller

      | summarize percentiles(tokens, 50, 75, 90, 95), max(tokens) by caller;'
  scoringRules:
  - name: Token extraction per session and tool
    rule: Tokens, promptToken, and completionToken are summed per sessionId and grouped
      by 'caller'.
    score: 1.0
  - name: Percentile calculations
    rule: Include percentiles (50, 75, 90, 95) and maximum for the token distribution
      per tool call.
    score: 2.0
  - name: Accurate filtering for extension steps
    rule: Filter only events where EventName has 'llmclient.sendrequest'.
    score: 1.0
  - name: Correct grouping by caller
    rule: Results must be grouped by the caller property.
    score: 1.0
- name: Upgrade Result By Version and Completion State
  difficulty: hard
  question: Report the distribution of upgrade result states (Succeeded, Failed, Incomplete)
    for each extension version (major.minor), including the session percentage for
    each state and version.
  intent: Evaluative
  kusto:
  - name: Upgrade Result By Version Query
    query: 'let all = raw

      | where EventName == "vscjava.vscode-java-upgrade/confirmplan.end"

      | distinct VSCodeMachineId, startTime = ServerTimestamp, sessionId, majorVersion,
      minorVersion;

      let openRewriteFailedResults = raw

      | where EventName ==  "vscjava.vscode-java-upgrade/openrewrite.end" and Properties["result"]
      == "failed"

      | distinct VSCodeMachineId, sessionId, majorVersion, minorVersion

      | project sessionId, orResult = "OpenResultFailed";

      let buildFixResult = raw

      | where EventName == "vscjava.vscode-java-upgrade/buildfix.end"

      | extend buildResult = iff(Properties["result"] == "true", "Succeeded", "BuildFixFailed")

      | distinct VSCodeMachineId, sessionId, majorVersion, minorVersion, buildResult

      | project sessionId, buildResult;

      let result = all

      | join kind=leftouter openRewriteFailedResults on sessionId

      | join kind=leftouter buildFixResult on sessionId

      | extend result = case(isnotempty( buildResult), buildResult, isnotempty(orResult),
      orResult, "Incomplete")

      | project VSCodeMachineId, startTime, sessionId, result, majorVersion, minorVersion,
      version = strcat(majorVersion, ".", minorVersion);;

      let total = result | summarize all = dcount(sessionId) by majorVersion, minorVersion;

      result

      | summarize stateCount = dcount(sessionId) by result, majorVersion, minorVersion

      | join kind=inner total on majorVersion, minorVersion

      | project Version = strcat(tostring(majorVersion), ".", tostring(minorVersion)),
      UpgradeState = result, Times = stateCount, Percentage = round(todouble(stateCount)
      / all * 100.0, 2)

      | order by Version asc;'
  scoringRules:
  - name: Distinct session counts for each version
    rule: Session counts should be grouped and reported by major.minor version per
      result state.
    score: 2.0
  - name: Correct computation of Percentage
    rule: Percentage should show times per state divided by all sessions for each
      (major.minor) version.
    score: 2.0
  - name: All major states present
    rule: States Succeeded, BuildFixFailed, OpenResultFailed, Incomplete must be present
      for each version if any exist.
    score: 1.0
  - name: Rating ordered by version
    rule: Results should be ordered by Version ascending for reporting.
    score: 1.0
